#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import logging
import os
import sys
import time

import boto3
import requests
import wood

import config

logging.Formatter.converter = time.gmtime
logging.basicConfig(level=logging.INFO,
                    stream=sys.stdout,
                    format='%(asctime)s.%(msecs)03d %(name)s %(levelname)-8s '
                           '%(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S')
logging.getLogger('botocore').setLevel(logging.WARNING)
logger = logging.getLogger(__name__)


logger.info('Deploying %s to prod', config.DOMAIN)

s3_resource = boto3.resource('s3', region_name=config.AWS_REGION)
cf_client = boto3.client('cloudfront', region_name=config.AWS_REGION)

# create a local tree representation
local_root = wood.root(config.DIST_DIR)

# create a remote tree representation
bucket = s3_resource.Bucket(config.S3_PROD_BUCKET)
objects = bucket.objects.all()
remote_root = wood.s3.objects_to_root(objects)

# calculate a comparison
comparison = wood.compare(remote_root, local_root)

# apply the changes in S3
syncer = wood.s3.Syncer(config.DIST_DIR, bucket)
syncer.sync(comparison)

# flush CloudFront first, as closest to the source
cloudfront = wood.cloudfront.Invalidator(
    cf_client,
    os.environ['CLOUDFRONT_DISTRIBUTION'],
    'Deploying ' + os.environ['TRAVIS_TAG'])
cloudfront.invalidate(comparison)

# flush Cloudflare
cloudflare = wood.cloudflare.Invalidator(
    requests.session(), os.environ['CLOUDFLARE_EMAIL'],
    os.environ['CLOUDFLARE_KEY'], os.environ['CLOUDFLARE_ZONE'],
    f'https://{config.DOMAIN}/')
cloudflare.invalidate(comparison)

logger.info(f'Deployed to https://{config.DOMAIN}')
